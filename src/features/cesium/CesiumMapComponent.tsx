import React, { useEffect, useRef, useState } from 'react';
import { Ion, Viewer, Cartesian3, Math as CesiumMath, createOsmBuildingsAsync, createWorldTerrainAsync, buildModuleUrl, Color, ColorMaterialProperty, ScreenSpaceEventHandler, defined, ScreenSpaceEventType, Entity, Cartesian2, JulianDate, Cartographic } from 'cesium';
import "cesium/Build/Cesium/Widgets/widgets.css";
import logo from '../map/logo.png'
import { useNavigate } from 'react-router-dom';
import SearchRainfallData from '../search/SearchRainfallData';
import SeachClimateChangePrediction from '../search/SeachClimateChangePrediction';
import { Button, Dialog, DialogActions, DialogContent, FormControlLabel, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Paper, Stack, Typography } from '@mui/material'

import {
  LogoImg,
  SelectPlaceName,
  CloseButton,
  SelectedText,
  ExplanationText,
  SelectButton,
  SearchContents,
  SearchButton,
  TestContents,
  FutureSearchButton,
  IconContents,
  IconWrapper,
  Popup,
  SplitscreenIcon,
  StorageIcon,
  LogoutIcon,
} from './style';

const CesiumMapComponent: React.FC = () => {
  const cesiumContainer = useRef<HTMLDivElement | null>(null);
  const viewer = useRef<Viewer | null>(null);
  const navigate = useNavigate();
  const [selectedPlaces, setSelectedPlaces] = useState<string[]>([]);
  const [mapWidth, setMapWidth] = useState<string>('100%');
  const [openRainfall, setopenRainfall] = useState<boolean>(false);
  const [openClimateChangePrediction, setopenClimateChangePrediction] = useState<boolean>(false);
  const [draftDialog, setDraftDialog] = useState<boolean>(false)
  const [confirmDialog, setConfirmDialog] = useState<boolean>(false)
  const [draftItems, setDraftItems] = useState<String[]>([])
  const [hoveredName, setHoveredName] = useState<string | null>(null);
  const [mousePosition, setMousePosition] = useState<{ x: number, y: number } | null>(null);
  const handlerRef = useRef<ScreenSpaceEventHandler | null>(null);
  const [selectId, setSelectId] = useState<string | null>(null);
  const [selectName, setSelectName] = useState<string | null>(null);
  const entityIds = useRef<string[]>([]);

  const catchmentArea: number[][] = [
    [136.29556257039889,35.6774690781054],[136.299636775601,35.67995867028529],[136.2991364745982,35.682454747889025],[136.29616525423953,35.68620437078445],[136.2936246774487,35.68834907430454],[136.29356856973553,35.69286369137125],[136.29949130363255,35.69584609197667],[136.30265352853985,35.69800902541085],[136.3046734574971,35.701382953274724],[136.3067167326519,35.70376089691441],[136.30862844164324,35.704544413379544],[136.31137368490377,35.70688191556826],[136.31159970866162,35.70707435985656],[136.3128477853756,35.71017932377642],[136.3134105955319,35.71326161665501],[136.3189370981175,35.71762902767875],[136.32345257931925,35.71821061334255],[136.32491946998073,35.72070149055762],[136.32201589028747,35.72320412167475],[136.32231587370453,35.72534174138198],[136.32407472985358,35.72795064431943],[136.3268550476817,35.73091315416876],[136.32818242315236,35.73482997689328],[136.32658886672536,35.7370915308814],[136.3266092405063,35.74208111455792],[136.3253209593887,35.7477870425444],[136.32082238964736,35.752551152509625],[136.3200913412051,35.755607669253095],[136.32140423121044,35.7575796109164],[136.321542924541,35.75778791966607],[136.3219693768856,35.76131497432835],[136.32406098258784,35.76878576322996],[136.32893801333967,35.77708936928212],[136.33286092075042,35.7786750399072],[136.34141577213452,35.77764225375045],[136.34739984806757,35.77888514157916],[136.35644373692963,35.78705107808981],[136.36279866838137,35.78952652292985],[136.36812599700707,35.79052010274552],[136.37296770900255,35.79426997943776],[136.377514038245,35.79627223363277],[136.38493741263773,35.795834504084034],[136.3880291187507,35.79565219740737],[136.39059043424973,35.79203223373071],[136.39401042378555,35.79008313857948],[136.39831715708027,35.79049664516842],[136.4023373830832,35.79115345826205],[136.40319636579866,35.787912048871725],[136.4063341582649,35.78601666166355],[136.40931461330743,35.7839912031185],[136.41270705272044,35.78279952336959],[136.4148735533718,35.78312818574889],[136.41818171895721,35.78496504569683],[136.4214788087381,35.78428119140886],[136.42555647607657,35.78121260824359],[136.43550395284473,35.77642240493477],[136.44281529129708,35.77702851300843],[136.4468778629872,35.77606448684007],[136.45902056701274,35.780495095153036],[136.46306379839845,35.780842068543095],[136.4683966489608,35.77573890890475],[136.47629613670827,35.77520696916702],[136.48361095341593,35.776239935276095],[136.48827110680693,35.77895911734947],[136.4885336551342,35.77420607643618],[136.49507061933437,35.77061564518248],[136.49752590591422,35.766922928730175],[136.50039383313268,35.75918936194888],[136.50429791798888,35.75406519145447],[136.50597518954478,35.75241471309773],[136.50822484207342,35.752978189215796],[136.50896562848547,35.75487584649928],[136.50928345303439,35.759270330517815],[136.51425965221563,35.76221888062423],[136.51471451614398,35.76494931359359],[136.51478113311768,35.775284536737864],[136.51597782166283,35.777578214372475],[136.52109755709725,35.783100364923975],[136.52518366590124,35.79064008452782],[136.53573274982074,35.78386931536872],[136.54213790026495,35.78241413670086],[136.54922798749536,35.78145624662182],[136.55846552611644,35.78210108854518],[136.5628342781327,35.78148691648423],[136.568085513,35.78181840641693],[136.57200716479034,35.77990010189709],[136.57464107709717,35.78119399819354],[136.57844833965385,35.783432540416314],[136.58677869177373,35.78612414311525],[136.58666782934748,35.79087661083084],[136.5875649241679,35.79443892515267],[136.59109046536045,35.79774727357599],[136.5970724691152,35.79777037215289],[136.59956515472254,35.799842395152176],[136.60247905212222,35.799471134365994],[136.60674772012615,35.794935681930426],[136.60929661446153,35.79468444022686],[136.61233533544396,35.791580195699055],[136.6171377397515,35.79024891633367],[136.62436087430893,35.78965718944335],[136.6277935127489,35.79185682868192],[136.62764058387393,35.797800887212034],[136.63516903297116,35.797760273259314],[136.6399368928031,35.80067463497488],[136.64224262340738,35.80519832461206],[136.6460197334348,35.80831224572169],[136.64746387677266,35.80805423945266],[136.6523977802921,35.80229348423315],[136.6531732968502,35.800294147016736],[136.65544118642077,35.78784989280454],[136.66042264195605,35.78591314552033],[136.66469383342104,35.78648245095416],[136.6700064639688,35.791044171182],[136.67684570853643,35.79503843196359],[136.68288406375734,35.791900615222225],[136.68928358767943,35.792042932617946],[136.6942050041955,35.79241566772188],[136.69901718960102,35.79541479580886],[136.70324199054863,35.795054224466966],[136.70694238307735,35.793688678604646],[136.7111697058516,35.793831454935216],[136.71408236775738,35.796923635912606],[136.72020080702634,35.80058183146092],[136.72352063924666,35.804463236110266],[136.72466089324482,35.80944848285608],[136.73311487256953,35.80897998741962],[136.7421490066814,35.8024305227636],[136.75720212190316,35.81150276918289],[136.7601961796736,35.81195891412893],[136.76551837596443,35.811865668740346],[136.77221679991865,35.8092569636197],[136.7759397523002,35.808733028768756],[136.778175843361,35.80151019930583],[136.78232153205903,35.800413532869015],[136.78930860262028,35.80117598280211],[136.79428937136728,35.808531051469636],[136.796810641229,35.81118108479582],[136.79794166415508,35.814607276037385],[136.7997380738908,35.82102785062343],[136.79902959911473,35.824751110273084],[136.79969653011383,35.831422746511954],[136.8009714493305,35.83502115832396],[136.80260469453307,35.83946545485161],[136.80450009813447,35.84481459967954],[136.81573267107157,35.84462012287263],[136.8264805603458,35.846922566994806],[136.82990252325703,35.850155500826496],[136.8323960507131,35.85529101568984],[136.83307215802915,35.861356482812305],[136.8318153381383,35.86677033965228],[136.82853200256287,35.87127428895953],[136.82478893520295,35.87881700045456],[136.8233674037025,35.87997966755453],[136.82332730333377,35.880012465549534],[136.8229038541895,35.88035880359334],[136.82197961158423,35.88240007936388],[136.8237008047099,35.88609371052934],[136.82422169777092,35.894501705028084],[136.82186944294028,35.899982339955976],[136.81718138695263,35.90553823963516],[136.81606764171568,35.91083213154486],[136.81397354024043,35.9131034236481],[136.80683302406675,35.9145771422509],[136.7994890295472,35.921730719229664],[136.78947971708592,35.922575609857645],[136.78526656918766,35.92567322066391],[136.78589074842915,35.930693819036286],[136.78722748854966,35.93263796328297],[136.7939701067592,35.94257938149433],[136.79402658787362,35.948221686136755],[136.80012627996672,35.95186374974019],[136.80477097016347,35.95604983459312],[136.80854495990445,35.96077617004516],[136.81141403185111,35.969844432726724],[136.8207533691523,35.98266985237158],[136.82075414959013,35.989797376673366],[136.82532289729144,35.99338917189238],[136.825379938611,35.993464715958254],[136.82779543682258,35.99666373739125],[136.8322589365266,35.999637192580536],[136.8386063595216,36.00349521229195],[136.8344730650225,36.008590626068475],[136.82982915277438,36.01183059561413],[136.82491808399433,36.010616896570156],[136.82177512153697,36.01069781383989],[136.81376544738984,36.013841255057976],[136.80885590578686,36.02700082306731],[136.8057911465146,36.03027905419149],[136.80436030258022,36.03071364575728],[136.7974884308524,36.03081920773804],[136.79693014401494,36.03343638761008],[136.79904397416615,36.039102570822],[136.80213973852372,36.04248892079289],[136.7982662904798,36.04982088973515],[136.79579769513,36.05179709110572],[136.78782437400574,36.05173088002298],[136.78206829440794,36.053966258050785],[136.77804649758642,36.054111359484054],[136.7712073540521,36.05783794128792],[136.76561062353187,36.06274981903715],[136.7661371830161,36.06781270307751],[136.76638143184854,36.070365159339744],[136.7654776248101,36.07524138810539],[136.76191062822807,36.07728501440397],[136.75880070152493,36.0811056490412],[136.75683051564366,36.08165243719565],[136.7543402328062,36.08687885529046],[136.75005880495436,36.08519983501034],[136.7456626009173,36.08451398209977],[136.74130977643784,36.08062048816215],[136.73004813500336,36.0812239548298],[136.72420307312217,36.08209125923543],[136.71860668695308,36.081933699402974],[136.71453605470975,36.081081280267185],[136.70690484778592,36.07910606986725],[136.70101303799586,36.074626271495035],[136.69588739317828,36.073886670786855],[136.69265610293988,36.072540023526216],[136.68841300082198,36.072620766591086],[136.68657482720923,36.071562339578264],[136.6786435544876,36.07058330789479],[136.67655150271062,36.067907179570774],[136.6623864367318,36.068291039614714],[136.65975117448437,36.07036759077647],[136.65975117448437,36.07036759077646],[136.65820628078484,36.07241726981825],[136.6576709031618,36.073127549699706],[136.6564660842045,36.07627168276],[136.65634647856538,36.08427697101937],[136.65373689297547,36.08726107676723],[136.65157260559496,36.091014752775656],[136.65114145010125,36.091402599514346],[136.64845001768882,36.09382356063969],[136.64233835539892,36.0980147406854],[136.63736967179645,36.099287877856796],[136.63305602733882,36.09972715274203],[136.62536541916566,36.10595045644881],[136.62176151206225,36.10620028085303],[136.61774197130933,36.10699320294822],[136.61344760502817,36.10945832141217],[136.61254454482264,36.11634498697211],[136.61105440730734,36.11794842232257],[136.60501259128986,36.122565476603704],[136.60402808070126,36.12638342196642],[136.60246853174385,36.12934429959174],[136.6004818247629,36.130530068430446],[136.59406220561934,36.13116817696136],[136.59025843063554,36.13160270041206],[136.58646356181106,36.133225092882306],[136.58596482706568,36.13500965236569],[136.58355182938374,36.135496430816055],[136.58092524219734,36.136815774495105],[136.57761106721605,36.1407548960801],[136.5738657655387,36.14278930509261],[136.57072050142804,36.143279608283414],[136.56706221614849,36.14371298524097],[136.56436257319507,36.145091430219736],[136.56175433289252,36.14902379057934],[136.56090304619383,36.15288848220744],[136.55650737228171,36.15326860296885],[136.55087777911157,36.154600147783015],[136.54676398497475,36.15265823962058],[136.5392941770385,36.15257240539625],[136.53781650367597,36.15061886504819],[136.53443137475654,36.14813918013376],[136.53061885716855,36.14744325289883],[136.5293059810927,36.14822118981434],[136.52744684831785,36.14968592612977],[136.52558764601318,36.151150634930445],[136.5214843479576,36.15075199246222],[136.51832996906194,36.14987422188096],[136.51303580842875,36.14645136490542],[136.50703014223663,36.1462982490676],[136.50374063209838,36.14720291788155],[136.50258222497112,36.149286604523695],[136.49723860702915,36.14960590365359],[136.49516968124036,36.155462035575525],[136.49197997944623,36.15822987028761],[136.48877163440088,36.15849479650323],[136.4860738095175,36.157581680380176],[136.47931406806475,36.15282098420535],[136.47420538538566,36.147129644690466],[136.47046902519145,36.14571672227062],[136.46764759039365,36.14152814481158],[136.46264876842594,36.137010964606716],[136.45451643736243,36.13727467873323],[136.4490274732967,36.1403507435031],[136.4448628149127,36.13956393875859],[136.44074863372447,36.136845434781954],[136.43902107439982,36.14195266547711],[136.43369600311607,36.143392621685926],[136.42733613831962,36.148410303078414],[136.42740558271558,36.1501708612669],[136.42341882577512,36.1547196386202],[136.41609538047794,36.15557880692367],[136.4151462920716,36.158588861067585],[136.41281109838653,36.160200693438796],[136.413281278541,36.166079212375884],[136.41323769702848,36.168535102918604],[136.40797617399832,36.171998968399706],[136.40547873003788,36.17046290379869],[136.39873923093998,36.17048975256281],[136.3937306737926,36.167520573640566],[136.38308463603155,36.16754251271328],[136.376463920835,36.16865703033352],[136.37278846242688,36.170217348744345],[136.36946942448097,36.169387916484695],[136.36577494653386,36.16587087838858],[136.35883298574674,36.16555582857406],[136.3579553306209,36.166188447993626],[136.35576778028206,36.16831297044021],[136.3518672219692,36.16908889718273],[136.34602004626848,36.17254895071599],[136.34245968147656,36.175269718976075],[136.34060363560553,36.17841697522012],[136.33936534561823,36.18181410861162],[136.33622231898943,36.18634183167746],[136.33759616373712,36.19002956537276],[136.33643088008807,36.19407841071574],[136.33308046970106,36.195509373920935],[136.33206089822423,36.20038657643563],[136.32961354253268,36.20351756748945],[136.3283566059342,36.207826162923766],[136.33125231572907,36.214755941228816],[136.33213571808076,36.21808629054513],[136.33052935269382,36.2205868825641],[136.33032917549045,36.22444350744105],[136.33085939019406,36.22830585885502],[136.32865223197732,36.2316505527834],[136.32340102965966,36.231662382751445],[136.31915637274912,36.23380985694885],[136.31609012980402,36.2376178453118],[136.31187261485383,36.237858653704215],[136.30679794402042,36.23908921605744],[136.30099342369357,36.23895738209852],[136.2963116898122,36.24193734595236],[136.28282259504758,36.241729103981115],[136.2776454819835,36.23833543243655],[136.27166419846097,36.236047493241955],[136.26593005396938,36.235577120980295],[136.25864949065164,36.235607362314646],[136.25146422942476,36.236433094503845],[136.24776261942395,36.23586580369787],[136.24410638343838,36.23860595484377],[136.22738382964278,36.23852106133384],[136.21490765825482,36.233315635115474],[136.20478793466756,36.23214507513704],[136.20156340583137,36.233738839885696],[136.20363280070154,36.2390369232692],[136.20215823133054,36.24314783656892],[136.18904425364082,36.235127156360825],[136.18764074433605,36.23978245437608],[136.18030906959237,36.23434556022385],[136.1826449417788,36.23018455141156],[136.17765351724518,36.22722208355779],[136.17399135073035,36.22865293636576],[136.1687128802571,36.22842310854936],[136.1675402724308,36.22994598334684],[136.15687906657007,36.2285594957573],[136.15374295321126,36.22759533005722],[136.15081535229703,36.224741422644506],[136.1519808787379,36.22093862383984],[136.1543751699355,36.21770739000046],[136.15474682829336,36.21524374847046],[136.15341390154114,36.210138011881355],[136.15032715449092,36.207173526225645],[136.1466649742904,36.206702089233886],[136.1431458738478,36.20623227120611],[136.1394780997429,36.19613832906619],[136.13303296339535,36.18640389538734],[136.12856064918162,36.17992594359705],[136.10902413854603,36.15784824334768],[136.11141379377392,36.155187965840234],[136.0999226812593,36.14657511650445],[136.10129095989083,36.14309556782099],[136.10395047401343,36.1404842405589],[136.1093250206594,36.13459784667235],[136.11040899766016,36.13193517771033],[136.12046603274513,36.12611109058067],[136.1200424635979,36.11837805753092],[136.11599516688892,36.11443018877112],[136.1097782426692,36.11057203569132],[136.108738830399,36.107464960958175],[136.10946087232824,36.105616306491456],[136.112668130837,36.104437335180734],[136.10572450254915,36.09915186652587],[136.10189325467718,36.09730709998483],[136.09671781401758,36.096303711965504],[136.09081290483303,36.09068181993904],[136.0846000635935,36.08606840969553],[136.0844885532525,36.08186450388766],[136.0861423440688,36.0800993207921],[136.09307035516667,36.07572612409805],[136.09792916304193,36.07211023736795],[136.107029274557,36.06723084384224],[136.11054221756012,36.06512749135907],[136.10495401228332,36.06236085041468],[136.08715256698486,36.05582614136415],[136.07893893526548,36.05159865686015],[136.07607599151768,36.05012488464328],[136.06770041915254,36.048194911683055],[136.06770041915254,36.04819491168306],[136.06770041915252,36.04819491168305],[136.0677004191525,36.04819491168304],[136.0677004191525,36.04819491168302],[136.06391502666952,36.045293926796255],[136.0573916945442,36.03496471264078],[136.0533433299749,36.0155616470432],[136.0516851574696,36.01136258036608],[136.0489942513974,36.008508153909396],[136.04516827671677,36.003047392060864],[136.03679414424093,35.99918655525984],[136.02914266390732,35.99389740964702],[136.02541971284816,35.990286776949155],[136.02345332344927,35.98583544609896],[136.01942490324774,35.98365044729111],[136.0204372932444,35.97632475143632],[136.0220047436009,35.97516559117248],[136.0149516566009,35.96802309584175],[136.01187407721653,35.962147809226],[136.01176934018255,35.958451744439515],[136.01425235556562,35.9552594259453],[136.01435482860705,35.94866209840587],[136.02034648041956,35.94820246990648],[136.02065454097604,35.94459026327672],[136.01724235532205,35.93938129504081],[136.01620747252383,35.93182125206633],[136.01037930941885,35.93143637215895],[136.01124945522534,35.92938607423184],[136.0151726111908,35.9254371052288],[136.01207355044167,35.917877207045315],[136.01351989752473,35.91451772027488],[136.01641027059304,35.91241699678513],[136.01868132600663,35.91090443288824],[136.0194937041869,35.90525367505964],[136.02580395438292,35.905022666481216],[136.02384019905216,35.899478950453094],[136.0209480908072,35.89628753968373],[136.0210318310155,35.89418560268444],[136.02084146448098,35.881670762676144],[136.02409777516678,35.879294561562816],[136.03136905973457,35.87914838496428],[136.03438915171623,35.88063557770908],[136.03674870625895,35.88063470226632],[136.04769100246222,35.87475096048987],[136.05177564781567,35.871897829451626],[136.0661510251406,35.87028713820113],[136.07206964445845,35.86716967109326],[136.07168417409096,35.86151147462209],[136.07165189418805,35.86103761109373],[136.07299170049404,35.859188801028004],[136.07577587245916,35.85717120268086],[136.07969191113352,35.851372816605235],[136.08072137805874,35.84960777769174],[136.08546390689816,35.84565597709106],[136.09659415789682,35.846094469595684],[136.09991035736041,35.84673665579735],[136.1019732909628,35.84631487787005],[136.10457416794986,35.8445457435781],[136.1086783942222,35.84538511860705],[136.11317452850406,35.84737803926255],[136.11559546422956,35.84840289865868],[136.11848460033693,35.848483937002285],[136.12068234937925,35.84765406651664],[136.12264111846994,35.84672772732362],[136.12718041808685,35.84638638206501],[136.1296538926386,35.8443675728327],[136.13057912681043,35.84251839325758],[136.13015390899702,35.83554659899171],[136.13241480511365,35.83033628116951],[136.13178595508435,35.8250448238721],[136.13590032784546,35.817058755029954],[136.1377465071627,35.811176390230216],[136.1404239617821,35.80856958447301],[136.1406537580406,35.80388599288112],[136.14434116047622,35.798729904039874],[136.1485688642647,35.798011513786356],[136.15089648664292,35.79515723828044],[136.1501362714956,35.789853059774245],[136.14322136900788,35.78620792459609],[136.13713209553433,35.782981731013585],[136.1332149662912,35.78248036983561],[136.12897958556337,35.779128204551206],[136.1250719162928,35.778770479886084],[136.12276920471328,35.77798009366778],[136.1197447667418,35.77515418210808],[136.11685072674058,35.773407506246805],[136.1173333291044,35.77016661557018],[136.11674794827067,35.76880106754788],[136.11521710534154,35.76862458987385],[136.11456062960224,35.76702040934541],[136.11855702436375,35.75982872661197],[136.11862250812985,35.755195422820464],[136.1239357670842,35.7512693711514],[136.12728134606928,35.74722659943426],[136.1320802235044,35.7433496716832],[136.13514041287488,35.74038722691811],[136.1352786018021,35.73652580519161],[136.13425179283226,35.732487729146904],[136.13526332307723,35.72761572432356],[136.1355492173162,35.72440776377003],[136.14461944609457,35.718145310640715],[136.1500699864057,35.713853874505844],[136.15170968664918,35.70965144863076],[136.15161239739928,35.7093911236588],[136.15067420406908,35.70688063025164],[136.14644308980465,35.704760436400555],[136.1516900244725,35.69948756458615],[136.15869950720307,35.702671224800596],[136.16209562946867,35.7014901455555],[136.16827366862267,35.7006406635064],[136.169002780899,35.70450416792708],[136.17096204484292,35.705593353008005],[136.17261775319156,35.705073349691],[136.1764800891157,35.705932871639014],[136.1815687177102,35.70490568037078],[136.18527772840767,35.70548825350332],[136.18960301657322,35.705313867882346],[136.19608425147865,35.702028097284526],[136.19915986640996,35.69563914226227],[136.1993098010778,35.69302053547127],[136.2006963715059,35.69185662808781],[136.2042984863303,35.6906752391737],[136.2091383670523,35.69033208040147],[136.21291269910824,35.68606397045627],[136.21478560048772,35.68611938315061],[136.21777458565634,35.687121592378986],[136.2231265996681,35.68635504961806],[136.22853289485724,35.6839988512323],[136.2314596905053,35.6839025465918],[136.23434645255597,35.6851569727124],[136.23681516883215,35.684312075387396],[136.24020267013626,35.680777193857885],[136.2437985767777,35.67808196080524],[136.24667742859552,35.676648219164264],[136.25460706926006,35.67705269744501],[136.26001291271203,35.674467304950824],[136.26467223159656,35.67439766801352],[136.26787368969053,35.67379662528748],[136.27317747871578,35.67045852083257],[136.2768834769208,35.66831194622301],[136.27986475621793,35.667176780174806],[136.28284855612722,35.66640317341588],[136.28692105783975,35.66686215108135],[136.2910096334257,35.6700005175375],[136.291751318972,35.6740380869992],[136.29556257039889,35.6774690781054]
  ]

  useEffect(() => {

    Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYThiN2MwYS04ODQyLTRiYjgtYmM5MS04ODU5ZDU4ZTUxNzEiLCJpZCI6MjM3Njg1LCJpYXQiOjE3MjU0MTg1MTl9.v1aYNfrpXuFzyo1D_5MUAA6Xq3OKIWGeQ5SObK1gloc';
    window.CESIUM_BASE_URL = '/Cesium/';

    const initializeViewer = async () => {
      if (!cesiumContainer.current || !viewer.current) {
        const terrainProvider = await createWorldTerrainAsync();
        viewer.current = new Viewer(cesiumContainer.current!, {
          terrainProvider,
          homeButton: false,
          sceneModePicker: false,
          baseLayerPicker: false,
          geocoder: false,
          navigationHelpButton: false,
          fullscreenButton: false,
          timeline: false,
          animation: false,
          infoBox: false,
        });

        viewer.current.camera.flyTo({
          destination: Cartesian3.fromDegrees(136.3629244, 35.8659201, 1500000),
          orientation: {
            heading: CesiumMath.toRadians(0.0),
            pitch: CesiumMath.toRadians(-90.0),
          },
        });

        // 川データを表示
        try {
          const response = await fetch('/rivClass1.geojson');
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const geojson: GeoJSON.FeatureCollection = await response.json();
          const features = Array.isArray(geojson) ? geojson : geojson.features;
          features.forEach((feature: any, index: number) => {
            const coordinates = feature.geometry.coordinates;
            viewer.current?.entities.add({
              id: feature.properties.RIC + index + 'livLine',
              name: feature.properties.name,
              polyline: {
                positions: Cartesian3.fromDegreesArray(coordinates.flat().flat()),
                width: 3,
                material: new ColorMaterialProperty(Color.fromCssColorString('#0077ff').withAlpha(0.6)),
              },
            });
          });
        } catch (error) {
          console.error('エラーです:', error);
        }
      
        // 川データを表示
        try {
          const response = await fetch('/watershed.geojson');
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const geojson: GeoJSON.FeatureCollection = await response.json();
          const features = Array.isArray(geojson) ? geojson : geojson.features;

          const popup = document.createElement('div');
          popup.id = 'popup';
          popup.style.position = 'absolute';
          popup.style.backgroundColor = 'white';
          popup.style.padding = '5px';
          popup.style.display = 'none';
          document.body.appendChild(popup);

          features.forEach((feature: any) => {
            const coordinates = feature.geometry.coordinates;

            const polygonHierarchy = Cartesian3.fromDegreesArray(coordinates[0].flat().flat());
            const entityId = feature.properties.id;  // エンティティのID
            const lineEntityId = `${feature.properties.id}_line`;  // ライン用のID
      
            // ポリゴンエンティティを追加し、IDを配列に格納
            viewer.current?.entities.add({
              id: entityId,
              name: feature.properties.name,
              polygon: {
                hierarchy: polygonHierarchy,
                material: new ColorMaterialProperty(Color.fromCssColorString('#3cb371').withAlpha(0.6)),
                outline: false,
              },
              properties: {
                name: feature.properties.name,
              },
            });
            entityIds.current.push(entityId);  // エンティティIDを配列に追加
      
            // ポリラインエンティティを追加し、IDを配列に格納
            viewer.current?.entities.add({
              id: lineEntityId,
              name: feature.properties.name,
              polyline: {
                positions: Cartesian3.fromDegreesArray(coordinates[0].flat().flat()),
                width: 2,
                material: new ColorMaterialProperty(Color.fromCssColorString('#008000').withAlpha(0.6)),
              },
            });
            entityIds.current.push(lineEntityId);
          });
        } catch (error) {
          console.error('エラーです:', error);
        }
      }
    };

    initializeViewer();

    if (handlerRef.current) {
      handlerRef.current.destroy();
    }
    handlerRef.current = new ScreenSpaceEventHandler(viewer.current?.scene.canvas);
    handlerRef.current.setInputAction((movement: { endPosition: Cartesian2; }) => {
      const pickedObject = viewer.current?.scene.pick(movement.endPosition);
      if (defined(pickedObject) && pickedObject.id && pickedObject.id.polygon) {
        const entity = pickedObject.id as Entity;
        const extrudedName = entity.name || "";
        setHoveredName(extrudedName);
        setMousePosition({ x: movement.endPosition.x, y: movement.endPosition.y });
      } else {
        setHoveredName('');
      }
    }, ScreenSpaceEventType.MOUSE_MOVE);

    handlerRef.current.setInputAction((movement: { position: Cartesian2 }) => {
      console.log('second')
      const pickedObject = viewer.current?.scene.pick(movement.position);
      
      if (defined(pickedObject) && pickedObject.id) {
        const clickedLayerId = pickedObject.id.id;
  
        viewer.current?.entities.values.forEach((entity) => {
          if (entity.id !== clickedLayerId) {
            entity.show = false;
            // viewer.current?.entities.remove(entity);
          } else {
            secondLayers()
            console.log(entity.id)
            setSelectId(entity.id)
            console.log(selectId)
            setSelectName(entity.name as string)
            setSelectedPlaces([entity.name as string])
            const positions = entity.polygon!.hierarchy!.getValue(JulianDate.now()).positions;
            if (positions && positions.length > 0) {
              const firstPosition = positions[0];
              const cartographic = Cartographic.fromCartesian(firstPosition);
              const longitude = CesiumMath.toDegrees(cartographic.longitude);
              const latitude = CesiumMath.toDegrees(cartographic.latitude);
              const altitude = 100000;

              viewer.current?.camera.flyTo({
                destination: Cartesian3.fromDegrees(longitude, latitude, altitude),
                orientation: {
                  heading: CesiumMath.toRadians(0.0),
                  pitch: CesiumMath.toRadians(-90.0),
                  roll: 0.0
                }
              });
            }
            entity.show = false;
          }
        });
      }
    }, ScreenSpaceEventType.LEFT_CLICK);

    return () => {
      if (viewer.current) {
        viewer.current.destroy();
        viewer.current = null;
      }
      if (handlerRef.current) {
        handlerRef.current.destroy();
        handlerRef.current = null;
      }
    };
  }, []);

  const secondLayers = async () => {
    const response = await fetch('/hanran_067.geojson');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const geojson: GeoJSON.FeatureCollection = await response.json();
    const features = Array.isArray(geojson) ? geojson : geojson.features;

    // const coordinates = features.geometry!.coordinates;
    features.forEach((feature: any) => {
      console.log(feature.geometry!.coordinates.flat().flat())
      viewer.current?.entities.add({
        polygon: {
          hierarchy: Cartesian3.fromDegreesArray(feature.geometry!.coordinates.flat().flat().flat()),
          material: new ColorMaterialProperty(Color.fromCssColorString('#4682b4').withAlpha(0.6)),
          outline: false,
        },
      });
  
      viewer.current?.entities.add({
        polyline: {
          positions: Cartesian3.fromDegreesArray(feature.geometry!.coordinates.flat().flat().flat()),
          width: 2,
          material: new ColorMaterialProperty(Color.fromCssColorString('#4682b4').withAlpha(0.6)),
        },
      });
    });
    viewer.current?.entities.add({
      polygon: {
        hierarchy: Cartesian3.fromDegreesArray(catchmentArea.flat()),
        material: new ColorMaterialProperty(Color.fromCssColorString('#3cb371').withAlpha(0.6)),
        outline: false,
      },
    });

    viewer.current?.entities.add({
      polyline: {
        positions: Cartesian3.fromDegreesArray(catchmentArea.flat()),
        width: 2,
        material: new ColorMaterialProperty(Color.fromCssColorString('#008000').withAlpha(0.6)),
      },
    });

    if (handlerRef.current) {
      handlerRef.current.destroy();
    }
    handlerRef.current = new ScreenSpaceEventHandler(viewer.current?.scene.canvas);
    handlerRef.current.setInputAction((movement: { position: Cartesian2 }) => {
      console.log('thied')
      const pickedObject = viewer.current?.scene.pick(movement.position);
      
      if (defined(pickedObject) && pickedObject.id) {
        const clickedLayerId = pickedObject.id.id;
  
        viewer.current?.entities.values.forEach((entity) => {
          if (entity.id !== clickedLayerId) {
            entity.show = false;
            //viewer.current?.entities.remove(entity);
          } else {
            console.log(selectId)
            console.log(selectName)
            thirdLayers(selectId ?? "0", selectName)
            const positions = entity.polygon!.hierarchy!.getValue(JulianDate.now()).positions;
            if (positions && positions.length > 0) {
              const firstPosition = positions[0];
              const cartographic = Cartographic.fromCartesian(firstPosition);
              const longitude = CesiumMath.toDegrees(cartographic.longitude);
              const latitude = CesiumMath.toDegrees(cartographic.latitude);
              const altitude = 100000;

              viewer.current?.camera.flyTo({
                destination: Cartesian3.fromDegrees(longitude, latitude, altitude),
                orientation: {
                  heading: CesiumMath.toRadians(0.0),
                  pitch: CesiumMath.toRadians(-90.0),
                  roll: 0.0
                }
              });
            }
            entity.show = false;
          }
        });
      }
    }, ScreenSpaceEventType.LEFT_CLICK);

  }
  const thirdLayers = async (id: string, name: any) => {
    const response = await fetch('/067_九頭竜川水系_基準点上流域.geojson');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const geojson: GeoJSON.FeatureCollection = await response.json();
    const features = Array.isArray(geojson) ? geojson : geojson.features;
    // データをpointごとにグループ化する
    const groupedPoints = groupByPoint(features);

    // グループ化されたデータに基づいてエンティティを作成
    addEntitiesByGroupedPoints(groupedPoints);
  }

  const groupByPoint = (features: GeoJSON.Feature[]) => {
    return features.reduce((acc: { [key: string]: GeoJSON.Feature[] }, feature) => {
      const pointName = feature.properties!.point;
      if (!acc[pointName]) {
        acc[pointName] = [];
      }
      acc[pointName].push(feature);
      return acc;
    }, {});
  };
  
  // グループ化されたデータからエンティティを作成するメソッド
  const addEntitiesByGroupedPoints = (groupedPoints: { [key: string]: GeoJSON.Feature[] }) => {
    Object.keys(groupedPoints).forEach((point) => {
      const features = groupedPoints[point];
      
      // 各pointの座標をまとめる
      const matchingCoordinates = features
        .map(feature => {
          if (feature.geometry.type === 'Point' && 'coordinates' in feature.geometry) {
            return (feature.geometry as GeoJSON.Point).coordinates;
          } else {
            console.warn(`Unsupported geometry type for feature: ${feature.geometry.type}`);
            return null;
          }
        })
        .filter((coordinate): coordinate is number[] => coordinate !== null) // nullを除外して型を保証
        .flat();

      if (matchingCoordinates.length > 0) {
        const polygonHierarchy = Cartesian3.fromDegreesArray(matchingCoordinates);

        viewer.current?.entities.add({
          polygon: {
            hierarchy: polygonHierarchy,
            material: new ColorMaterialProperty(Color.fromCssColorString('#3cb371').withAlpha(0.6)),
            outline: false,
          },
        });

        viewer.current?.entities.add({
          polyline: {
            positions: polygonHierarchy,
            width: 2,
            material: new ColorMaterialProperty(Color.fromCssColorString('#008000').withAlpha(0.6)),
          },
        });
      } else {
        console.warn(`${point}の座標が見つかりませんでした`);
      }
    });
  };

  const addSelectedPlaces = (info: string) => {
    const updatedPlaces = [...selectedPlaces, info];

    setSelectedPlaces(updatedPlaces);
  };

  const removeSelectedPlaces = () => {
    setDraftDialog(false);
    setDraftItems([]);
  };

  const closeDialog = () => {
    setDraftDialog(false);
    setDraftItems([]);
  }

  const closeConfirmDialog = () => {
    setConfirmDialog(false);
  };

  const openConfirmDialog = () => {
    setConfirmDialog(true);
  };

  const closeRainfall = () => {
    setopenRainfall(false);
    setMapWidth('100%');
  };

  const closeClimateChangePrediction = () => {
    setopenClimateChangePrediction(false);
    setMapWidth('100%');
  };

  const handleRainfall = () => {
    setopenClimateChangePrediction(false);
    setopenRainfall(true);
    setMapWidth('60%');
    setConfirmDialog(false);
  };

  const handleClimateChangePrediction = () => {
    setopenRainfall(false);
    setopenClimateChangePrediction(true);
    setMapWidth('60%');
    setConfirmDialog(false);
  };

  const clearSelection = async () => {
    setSelectedPlaces([]);

    // すべてのエンティティを取得
    const allEntities = viewer.current?.entities.values;

    // entityIds.current に登録されているIDを使って、エンティティを表示または削除
    if (allEntities && entityIds.current) {
      allEntities.forEach((entity) => {
        if (entityIds.current.includes(entity.id)) {
          entity.show = true;
        } else {
          viewer.current?.entities.remove(entity);
        }
      });
    }
  };

  const homeLink = () => {
    navigate('/')
  }

  return (
    <div style={{ display: 'flex' }}>
      <div ref={cesiumContainer} style={{ width: mapWidth, height: '100vh' }}>
        <LogoImg src={logo} alt="Logo" onClick={homeLink} />
        {hoveredName && mousePosition && (
          <div
            style={{
              position: 'absolute',
              top: mousePosition.y + 10,
              left: mousePosition.x + 10,
              backgroundColor: 'rgba(0, 0, 0, 0.7)',
              color: 'white',
              padding: '5px',
              borderRadius: '5px',
              pointerEvents: 'none',
              zIndex: '1000'
            }}
          >
            {hoveredName}
          </div>
        )}
        {!(openRainfall || openClimateChangePrediction) && selectedPlaces.length > 0 && (
          <SelectPlaceName>
            <CloseButton onClick={clearSelection}>×</CloseButton>
            {selectedPlaces.map((selectedPlace, index) => (
              <SelectedText key={index}>{selectedPlace}</SelectedText>
            ))}
            <SelectButton onClick={openConfirmDialog}>決定</SelectButton>
          </SelectPlaceName>
        )}
        {!(openRainfall || openClimateChangePrediction) && selectedPlaces.length == 0 && (
          <SelectPlaceName>
            <ExplanationText>調べたい地点をクリックしてください</ExplanationText>
          </SelectPlaceName>
        )}

        <IconContents openRainfall={openRainfall} openClimateChangePrediction={openClimateChangePrediction}>
          <IconWrapper>
            <StorageIcon />
            <Popup className="popup">保存済みデータ</Popup>
          </IconWrapper>
          <IconWrapper>
            <SplitscreenIcon />
            <Popup className="popup">2画面切り替え</Popup>
          </IconWrapper>
          <IconWrapper>
            <LogoutIcon />
            <Popup className="popup">ログアウト</Popup>
          </IconWrapper>
        </IconContents>

        <Dialog
          open={draftDialog}
          onClose={() => { closeDialog() }}
        >
          <DialogContent dividers sx={{ pl: 0, pr: 0, py: 1, width: '300px' }}>
            <List dense disablePadding>
              {
                draftItems.map((item, i) => (
                  <ListItem disablePadding key={i}>
                    <ListItemText primary={`${item}`} />
                  </ListItem>
                ))
              }
            </List>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => closeDialog()} size='small'>
              キャンセル
            </Button>
          </DialogActions>
        </Dialog>

        <Dialog
          open={confirmDialog}
          onClose={() => { closeConfirmDialog() }}
        >
          <DialogContent dividers sx={{ pl: 0, pr: 0, py: 1, width: '300px' }}>
            <ListItemButton onClick={handleRainfall} sx={{ pr: 4 }}>
              <ListItemText primary={'実績降雨データ検索'} />
            </ListItemButton>
            <ListItemButton onClick={handleClimateChangePrediction} sx={{ pr: 4 }}>
              <ListItemText primary={'気候変動予測データ検索'} />
            </ListItemButton>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => closeConfirmDialog()} size='small'>
              キャンセル
            </Button>
          </DialogActions>
        </Dialog>

        <SearchContents openRainfall={openRainfall} openClimateChangePrediction={openClimateChangePrediction}>
          <SearchButton onClick={handleRainfall}>実績降雨データ検索</SearchButton>
          <FutureSearchButton onClick={handleClimateChangePrediction}>気候変動予測データ検索</FutureSearchButton>
        </SearchContents>
      </div>

      {openRainfall && (
        <div style={{ width: '40%', maxHeight: '100vh' }}>
          <SearchRainfallData selectedPlaces={selectedPlaces} closeRainfall={closeRainfall} />
        </div>
      )}
      {openClimateChangePrediction && (
        <div style={{ width: '40%', height: '100vh' }}>
          <SeachClimateChangePrediction selectedPlaces={selectedPlaces} closeClimateChangePrediction={closeClimateChangePrediction} />
        </div>
      )}
    </div>
  );
};

export default CesiumMapComponent;
